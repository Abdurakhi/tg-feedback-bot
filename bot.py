import os
import logging
import sqlite3
from contextlib import closing
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackContext,
    CallbackQueryHandler,
    filters,
    PicklePersistence  # –ó–∞–º–µ–Ω–∞ Persistence
)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = os.environ.get('TOKEN')
ADMIN_ID = int(os.environ.get('ADMIN_ID'))
PORT = int(os.environ.get('PORT', 5000))
RENDER_EXTERNAL_HOSTNAME = os.environ.get('RENDER_EXTERNAL_HOSTNAME')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    with closing(sqlite3.connect('data.db')) as conn:
        conn.execute('''
        CREATE TABLE IF NOT EXISTS messages (
            user_message_id INTEGER PRIMARY KEY,
            user_id INTEGER NOT NULL,
            admin_message_id INTEGER NOT NULL
        )
        ''')
        conn.execute('''
        CREATE TABLE IF NOT EXISTS pending_replies (
            user_id INTEGER PRIMARY KEY,
            admin_message_id INTEGER NOT NULL
        )
        ''')
        conn.commit()

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
def save_message(user_id, user_message_id, admin_message_id):
    with closing(sqlite3.connect('data.db')) as conn:
        conn.execute("INSERT INTO messages VALUES (?, ?, ?)", 
                    (user_message_id, user_id, admin_message_id))
        conn.execute("INSERT OR REPLACE INTO pending_replies VALUES (?, ?)", 
                    (user_id, admin_message_id))
        conn.commit()

def get_user_data(user_message_id):
    with closing(sqlite3.connect('data.db')) as conn:
        cur = conn.execute("SELECT user_id, admin_message_id FROM messages WHERE user_message_id = ?", 
                          (user_message_id,))
        return cur.fetchone()

def delete_pending_reply(user_id):
    with closing(sqlite3.connect('data.db')) as conn:
        conn.execute("DELETE FROM pending_replies WHERE user_id = ?", (user_id,))
        conn.commit()

async def start(update: Update, context: CallbackContext):
    user = update.effective_user
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n"
        "–û—Ç–ø—Ä–∞–≤—å —Å—é–¥–∞ —Å–≤–æ–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è. "
        "–Ø –∞–Ω–æ–Ω–∏–º–Ω–æ –ø–µ—Ä–µ–¥–∞–º –∏—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\n\n"
        "–ú–æ–∂–µ—à—å –ø—Ä–∏–∫—Ä–µ–ø–ª—è—Ç—å —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ –¥—Ä—É–≥–∏–µ —Ñ–∞–π–ª—ã."
    )

async def handle_message(update: Update, context: CallbackContext):
    user = update.effective_user
    message = update.effective_message
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user_info = (
        f"üë§ –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å:\n"
        f"ID: {user.id}\n"
        f"–ò–º—è: {user.first_name or '-'}\n"
        f"–§–∞–º–∏–ª–∏—è: {user.last_name or '-'}\n"
        f"–Æ–∑–µ—Ä–Ω–µ–π–º: @{user.username if user.username else '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n"
        f"–Ø–∑—ã–∫: {user.language_code or '-'}"
    )
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–û—Ç–≤–µ—Ç–∏—Ç—å"
    keyboard = InlineKeyboardMarkup([[
        InlineKeyboardButton("‚úâÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_{message.message_id}")
    ]])
    
    try:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        content_type = None
        if message.text:
            content_type = "text"
            sent_msg = await context.bot.send_message(
                chat_id=ADMIN_ID,
                text=f"{user_info}\n\nüì© –°–æ–æ–±—â–µ–Ω–∏–µ:\n{message.text}",
                reply_markup=keyboard
            )
        elif message.photo:
            content_type = "photo"
            sent_msg = await context.bot.send_photo(
                chat_id=ADMIN_ID,
                photo=message.photo[-1].file_id,
                caption=f"{user_info}\n\nüì© –ü–æ–¥–ø–∏—Å—å –∫ —Ñ–æ—Ç–æ:\n{message.caption or '-'}",
                reply_markup=keyboard
            )
        elif message.video:
            content_type = "video"
            sent_msg = await context.bot.send_video(
                chat_id=ADMIN_ID,
                video=message.video.file_id,
                caption=f"{user_info}\n\nüì© –ü–æ–¥–ø–∏—Å—å –∫ –≤–∏–¥–µ–æ:\n{message.caption or '-'}",
                reply_markup=keyboard
            )
        elif message.document:
            content_type = "document"
            sent_msg = await context.bot.send_document(
                chat_id=ADMIN_ID,
                document=message.document.file_id,
                caption=f"{user_info}\n\nüì© –ü–æ–¥–ø–∏—Å—å –∫ –¥–æ–∫—É–º–µ–Ω—Ç—É:\n{message.caption or '-'}",
                reply_markup=keyboard
            )
        elif message.audio:
            content_type = "audio"
            sent_msg = await context.bot.send_audio(
                chat_id=ADMIN_ID,
                audio=message.audio.file_id,
                caption=f"{user_info}\n\nüì© –ü–æ–¥–ø–∏—Å—å –∫ –∞—É–¥–∏–æ:\n{message.caption or '-'}",
                reply_markup=keyboard
            )
        elif message.voice:
            content_type = "voice"
            sent_msg = await context.bot.send_voice(
                chat_id=ADMIN_ID,
                voice=message.voice.file_id,
                caption=f"{user_info}\n\nüì© –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
                reply_markup=keyboard
            )
        elif message.sticker:
            content_type = "sticker"
            await context.bot.send_sticker(chat_id=ADMIN_ID, sticker=message.sticker.file_id)
            sent_msg = await context.bot.send_message(
                chat_id=ADMIN_ID,
                text=f"{user_info}\n\nüì© –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Å—Ç–∏–∫–µ—Ä",
                reply_markup=keyboard
            )
        elif message.video_note:
            content_type = "video_note"
            await context.bot.send_video_note(chat_id=ADMIN_ID, video_note=message.video_note.file_id)
            sent_msg = await context.bot.send_message(
                chat_id=ADMIN_ID,
                text=f"{user_info}\n\nüì© –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –≤–∏–¥–µ–æ-–∑–∞–º–µ—Ç–∫—É",
                reply_markup=keyboard
            )
        elif message.animation:
            content_type = "animation"
            sent_msg = await context.bot.send_animation(
                chat_id=ADMIN_ID,
                animation=message.animation.file_id,
                caption=f"{user_info}\n\nüì© –ü–æ–¥–ø–∏—Å—å –∫ GIF:\n{message.caption or '-'}",
                reply_markup=keyboard
            )
        else:
            content_type = "other"
            sent_msg = await context.bot.send_document(
                chat_id=ADMIN_ID,
                document=message.effective_attachment.file_id,
                caption=f"{user_info}\n\nüì© –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–∞–π–ª–æ–º\n–¢–∏–ø: {message.effective_attachment.mime_type}",
                reply_markup=keyboard
            )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤—è–∑—å –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –≤ –ë–î
        save_message(user.id, message.message_id, sent_msg.message_id)
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user.id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ. –¢–∏–ø: {content_type}")
        
        await update.message.reply_text("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")

async def reply_callback(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    original_message_id = int(query.data.split('_')[1])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤—è–∑—å –¥–ª—è –æ—Ç–≤–µ—Ç–∞
    context.user_data['replying_to'] = original_message_id
    await query.edit_message_text(
        text=query.message.text + "\n\nüü¢ –û–¢–í–ï–¢ –ê–ö–¢–ò–í–ò–†–û–í–ê–ù! –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç:",
        reply_markup=None
    )

async def handle_admin_reply(update: Update, context: CallbackContext):
    if update.effective_user.id != ADMIN_ID:
        return
    
    reply_data = context.user_data.get('replying_to')
    if not reply_data:
        return
    
    # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞
    user_data = get_user_data(reply_data)
    if not user_data:
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    user_id, admin_msg_id = user_data
    message = update.effective_message
    
    try:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤
        content_type = None
        if message.text:
            content_type = "text"
            await context.bot.send_message(
                chat_id=user_id,
                text=f"üì® –û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n{message.text}"
            )
        elif message.photo:
            content_type = "photo"
            await context.bot.send_photo(
                chat_id=user_id,
                photo=message.photo[-1].file_id,
                caption=f"üì® –û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n{message.caption or ''}"
            )
        elif message.video:
            content_type = "video"
            await context.bot.send_video(
                chat_id=user_id,
                video=message.video.file_id,
                caption=f"üì® –û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n{message.caption or ''}"
            )
        elif message.document:
            content_type = "document"
            await context.bot.send_document(
                chat_id=user_id,
                document=message.document.file_id,
                caption=f"üì® –û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n{message.caption or ''}"
            )
        elif message.audio:
            content_type = "audio"
            await context.bot.send_audio(
                chat_id=user_id,
                audio=message.audio.file_id,
                caption=f"üì® –û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n{message.caption or ''}"
            )
        elif message.voice:
            content_type = "voice"
            await context.bot.send_voice(
                chat_id=user_id,
                voice=message.voice.file_id,
                caption=f"üì® –û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:"
            )
        elif message.sticker:
            content_type = "sticker"
            await context.bot.send_sticker(
                chat_id=user_id,
                sticker=message.sticker.file_id
            )
        elif message.video_note:
            content_type = "video_note"
            await context.bot.send_video_note(
                chat_id=user_id,
                video_note=message.video_note.file_id
            )
        elif message.animation:
            content_type = "animation"
            await context.bot.send_animation(
                chat_id=user_id,
                animation=message.animation.file_id,
                caption=f"üì® –û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n{message.caption or ''}"
            )
        else:
            content_type = "other"
            await context.bot.send_document(
                chat_id=user_id,
                document=message.effective_attachment.file_id,
                caption=f"üì® –û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n{message.caption or ''}"
            )
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if 'replying_to' in context.user_data:
            del context.user_data['replying_to']
        delete_pending_reply(user_id)
        
        try:
            await context.bot.delete_message(chat_id=ADMIN_ID, message_id=admin_msg_id)
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        
        logger.info(f"–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}. –¢–∏–ø: {content_type}")
        await update.message.reply_text("‚úÖ –û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞: {e}")
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")

def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    init_db()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ Application —Å PicklePersistence
    persistence = PicklePersistence(filepath='bot_persistence.pickle')
    application = Application.builder().token(TOKEN).persistence(persistence).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(
        filters.TEXT | filters.PHOTO | filters.VIDEO | filters.Document.ALL |
        filters.AUDIO | filters.VOICE | filters.Sticker.ALL | filters.VIDEO_NOTE |
        filters.ANIMATION | filters.ATTACHMENT,
        handle_message
    ))
    application.add_handler(CallbackQueryHandler(reply_callback, pattern=r"^reply_\d+$"))
    application.add_handler(MessageHandler(filters.Chat(ADMIN_ID) & ~filters.COMMAND, handle_admin_reply))

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è Render
    if RENDER_EXTERNAL_HOSTNAME:
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±—Ö—É–∫–∞
        application.run_webhook(
            listen="0.0.0.0",
            port=PORT,
            webhook_url=f"https://{RENDER_EXTERNAL_HOSTNAME}/{TOKEN}"
        )
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —á–µ—Ä–µ–∑ –≤–µ–±—Ö—É–∫")
    else:
        # –õ–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫
        application.run_polling()
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ —Å polling")

if __name__ == "__main__":
    main()
